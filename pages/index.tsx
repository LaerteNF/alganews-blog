import { Post, PostService } from 'laerte_fernandes-sdk';
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import FeaturedPost from '../components/FeaturedPost'
import { ServerResponse } from "http";
import PostCard from '../components/PostCard';
import PostsGrid from '../components/PostsGrid';
import PageGrid from '../components/PageGrid';
import ReactPaginate from 'react-paginate';
import Router from "next/router"; 

interface HomeProps {
  posts?: Post.Paginated
}

export default function Home(props: HomeProps){

  const {posts} = props

  return (
    <PageGrid>
      <Head>
        <title>AlgaNews</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {posts?.content && <FeaturedPost postSummary={posts?.content[0]} /> }
      <PostsGrid>
        {
          // remove o primeiro post que já está em destaque acima
          posts?.content?.slice(1).map((post) => {
            return <PostCard key={post.id} post={post} />
          })
        }
      </PostsGrid>

      <ReactPaginate
        containerClassName={"Pagination"}
        pageCount={posts?.totalPages || 0}
        marginPagesDisplayed={0}
        pageRangeDisplayed={3}
        previousLabel={'<'}
        nextLabel={'>'}
        hrefBuilder={page => `/?page=${page}`}
        onPageChange={page => {
          Router.push(`/?page=${page.selected + 1}`);
        }}
      />

    </PageGrid>
  )
}

function sendToHomePage(res: ServerResponse) {
  // redirecionamento (feito pelo browser)
  res.statusCode = 302
  res.setHeader('Location', '/?page=1')
  // retorna um objeto props vazio pois não precisa exwecutar a busca da página abaixo
  return { props: {} }
}

export const getServerSideProps : GetServerSideProps<HomeProps> = async ({query, res}) => {

  const {page: _page} = query

  const page = _page ? Number(_page) : 1;

  // se o parametro page passado na query string da url não for um numero ou menor que 1
  if( isNaN(page) || page < 1){
    sendToHomePage(res)
  }

  const posts = await PostService.getAllPosts({ page: Number(page) -1})

  if(!posts.content?.length){
    sendToHomePage(res)
  }

  return {
    props: {
      posts
    }
  }
}
